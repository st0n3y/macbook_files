rvar React = require('react');
var CommentList = require('./CommentList');
var CommentForm = require('./CommentForm');

var CommentBox = React.createClass({
  
  loadCommentsFromServer: function() {
    var url = this.props.url;
    var request = new XMLHttpRequest();
    request.open("GET", url);
    request.setRequestHeader("Content-Type", "application/json");
    request.onload = function(){
      if(request.status === 200){
        var data = JSON.parse(request.responseText);
        this.setState({data: data});
      }
    }.bind(this)
    request.send(null);
  },

  componentDidMount: function() {
    // Makes the program poll the server for new comments every second.
    setInterval(this.loadCommentsFromServer, 1000);
    this.loadCommentsFromServer();
  },

  getInitialState: function() {
    return {data: []};
  },

  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    var url = this.props.url;
    var request = new XMLHttpRequest();
    request.open("POST", url, true);
    request.setRequestHeader("Content-Type", "application/json");
    request.onload = function(){
      if(request.status === 200){
        //wise to make request from server to complete chain.
        this.loadCommentsFromServer();
      }
    }.bind(this)
    request.send( JSON.stringify(comment) );
  },
  
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
  
});

module.exports = CommentBox;